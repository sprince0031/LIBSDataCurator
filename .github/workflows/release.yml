name: Release - Build and Package

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v0.8.1, etc.

jobs:
  build-release:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            extension: tar.gz
          - os: windows-latest
            platform: windows
            extension: zip
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "maven"

      - name: Get version from tag
        id: get_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build application
        run: mvn -B package -DskipTests --file pom.xml

      - name: Create custom JRE with jlink (Linux/macOS)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Create custom JRE with only required modules including security modules for SSL/TLS
          jlink --add-modules java.se,java.security.jgss,java.security.sasl,java.xml.crypto,jdk.crypto.cryptoki,jdk.crypto.ec,jdk.security.auth,jdk.security.jgss \
                --strip-debug \
                --no-man-pages \
                --no-header-files \
                --compress=2 \
                --output ./jre-custom
          
          # Update cacerts with system certificate store to fix SSL issues
          if [ -f "/etc/ssl/certs/adoptium/cacerts" ]; then
            cp /etc/ssl/certs/adoptium/cacerts ./jre-custom/lib/security/cacerts
            echo "Updated cacerts from system store"
          elif [ -f "/etc/ssl/certs/java/cacerts" ]; then
            cp /etc/ssl/certs/java/cacerts ./jre-custom/lib/security/cacerts
            echo "Updated cacerts from system Java store"
          else
            echo "Warning: System cacerts not found, using default"
          fi

      - name: Create custom JRE with jlink (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Create custom JRE with only required modules including security modules for SSL/TLS
          jlink --add-modules java.se,java.security.jgss,java.security.sasl,java.xml.crypto,jdk.crypto.cryptoki,jdk.crypto.ec,jdk.security.auth,jdk.security.jgss --strip-debug --no-man-pages --no-header-files --compress=2 --output ./jre-custom
          
          # Update cacerts - Windows may have different paths
          Write-Host "Checking for system cacerts..."
          if (Test-Path "C:\Program Files\Eclipse Adoptium\jdk-21.*\lib\security\cacerts") {
            $systemCacerts = Get-ChildItem "C:\Program Files\Eclipse Adoptium\jdk-21.*\lib\security\cacerts" | Select-Object -First 1
            Copy-Item $systemCacerts.FullName ./jre-custom/lib/security/cacerts -Force
            Write-Host "Updated cacerts from system store"
          } else {
            Write-Host "Warning: System cacerts not found, using default"
          }

      - name: Prepare release package (Linux/macOS)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p release-package/lib
          mkdir -p release-package/bin
          mkdir -p release-package/conf
          mkdir -p release-package/data
          mkdir -p release-package/logs
          
          # Copy JAR
          cp target/LIBSDataCurator.jar release-package/lib/
          
          # Copy custom JRE
          cp -r jre-custom release-package/
          
          # Copy configuration files if they exist
          if [ -d "Build/conf" ]; then
            cp -r Build/conf/* release-package/conf/ 2>/dev/null || true
          fi
          
          # Copy only user-facing documentation (not developer build docs)
          if [ -f "docs/CHANGELOG.md" ]; then
            cp docs/CHANGELOG.md release-package/
          fi
          
          # Create run script
          cat > release-package/bin/run.sh << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          MAIN_DIR="$(dirname "$SCRIPT_DIR")"
          
          # Use bundled JRE
          JAVA_HOME="$MAIN_DIR/jre-custom"
          export JAVA_HOME
          
          # Change to package directory so application can find conf files
          cd "$MAIN_DIR"
          
          # Run the application
          "$JAVA_HOME/bin/java" -jar "$MAIN_DIR/lib/LIBSDataCurator.jar" "$@"
          EOF
          
          chmod +x release-package/bin/run.sh
          
          # Create README
          cat > release-package/README.txt << 'EOF'
          LIBSDataCurator ${{ steps.get_version.outputs.version }}
          
          This is a self-contained package that includes:
          - The application JAR file
          - A custom Java Runtime Environment (JRE)
          - Configuration files
          - Documentation
          
          To run the application:
          
          Linux/macOS:
          ./bin/run.sh [arguments]
          
          The application includes its own JRE, so you don't need Java installed on your system.
          EOF

      - name: Prepare release package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          New-Item -ItemType Directory -Force -Path release-package/lib
          New-Item -ItemType Directory -Force -Path release-package/bin
          New-Item -ItemType Directory -Force -Path release-package/conf
          New-Item -ItemType Directory -Force -Path release-package/data
          New-Item -ItemType Directory -Force -Path release-package/logs
          
          # Copy JAR
          Copy-Item target/LIBSDataCurator.jar release-package/lib/
          
          # Copy custom JRE
          Copy-Item -Recurse jre-custom release-package/
          
          # Copy configuration files if they exist
          if (Test-Path "Build/conf") {
            Copy-Item -Recurse Build/conf/* release-package/conf/ -ErrorAction SilentlyContinue
          }
          
          # Copy only user-facing documentation (not developer build docs)
          if (Test-Path "docs/CHANGELOG.md") {
            Copy-Item docs/CHANGELOG.md release-package/
          }
          
          # Create run script
          @"
          @echo off
          set SCRIPT_DIR=%~dp0
          set MAIN_DIR=%SCRIPT_DIR%..
          
          REM Use bundled JRE
          set JAVA_HOME=%MAIN_DIR%\jre-custom
          
          REM Change to package directory so application can find conf files
          cd /d "%MAIN_DIR%"
          
          REM Run the application
          "%JAVA_HOME%\bin\java.exe" -jar "%MAIN_DIR%\lib\LIBSDataCurator.jar" %*
          "@ | Out-File -FilePath "release-package/bin/run.bat" -Encoding ASCII
          
          # Create README
          @"
          LIBSDataCurator ${{ steps.get_version.outputs.version }}
          
          This is a self-contained package that includes:
          - The application JAR file
          - A custom Java Runtime Environment (JRE)
          - Configuration files
          - Documentation
          
          To run the application:
          
          Windows:
          bin\run.bat [arguments]
          
          The application includes its own JRE, so you don't need Java installed on your system.
          "@ | Out-File -FilePath "release-package/README.txt" -Encoding UTF8

      - name: Create archive (Linux/macOS)
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -czf LIBSDataCurator-${{ steps.get_version.outputs.version }}-${{ matrix.platform }}.tar.gz -C release-package .

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path release-package/* -DestinationPath LIBSDataCurator-${{ steps.get_version.outputs.version }}-${{ matrix.platform }}.zip

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: LIBSDataCurator-${{ steps.get_version.outputs.version }}-${{ matrix.platform }}.${{ matrix.extension }}
          body: |
            ## LIBSDataCurator ${{ steps.get_version.outputs.version }}
            
            Self-contained packages with bundled JRE. No need to install Java separately.
            
            ### Downloads
            - **Linux/macOS**: `LIBSDataCurator-${{ steps.get_version.outputs.version }}-linux.tar.gz`
            - **Windows**: `LIBSDataCurator-${{ steps.get_version.outputs.version }}-windows.zip`
            
            ### Usage
            - Extract the archive
            - Run `bin/run.sh` (Linux/macOS) or `bin\run.bat` (Windows)
            
            See included README.txt for more details.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}